/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as Import } from './routes/*'
import { Route as ScheduleSlugImport } from './routes/$scheduleSlug'
import { Route as IndexImport } from './routes/index'
import { Route as ManageAdminLayoutImport } from './routes/manage/_adminLayout'
import { Route as ManageAdminLayoutIndexImport } from './routes/manage/_adminLayout/index'
import { Route as ManageAdminLayoutTeachersImport } from './routes/manage/_adminLayout/teachers'
import { Route as ManageAdminLayoutSubjectsImport } from './routes/manage/_adminLayout/subjects'
import { Route as ManageAdminLayoutScheduleImport } from './routes/manage/_adminLayout/schedule'

// Create Virtual Routes

const ManageImport = createFileRoute('/manage')()

// Create/Update Routes

const ManageRoute = ManageImport.update({
  id: '/manage',
  path: '/manage',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const Route = Import.update({
  id: '/*',
  path: '/*',
  getParentRoute: () => rootRoute,
} as any)

const ScheduleSlugRoute = ScheduleSlugImport.update({
  id: '/$scheduleSlug',
  path: '/$scheduleSlug',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ManageAdminLayoutRoute = ManageAdminLayoutImport.update({
  id: '/_adminLayout',
  getParentRoute: () => ManageRoute,
} as any)

const ManageAdminLayoutIndexRoute = ManageAdminLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ManageAdminLayoutRoute,
} as any)

const ManageAdminLayoutTeachersRoute = ManageAdminLayoutTeachersImport.update({
  id: '/teachers',
  path: '/teachers',
  getParentRoute: () => ManageAdminLayoutRoute,
} as any)

const ManageAdminLayoutSubjectsRoute = ManageAdminLayoutSubjectsImport.update({
  id: '/subjects',
  path: '/subjects',
  getParentRoute: () => ManageAdminLayoutRoute,
} as any)

const ManageAdminLayoutScheduleRoute = ManageAdminLayoutScheduleImport.update({
  id: '/schedule',
  path: '/schedule',
  getParentRoute: () => ManageAdminLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$scheduleSlug': {
      id: '/$scheduleSlug'
      path: '/$scheduleSlug'
      fullPath: '/$scheduleSlug'
      preLoaderRoute: typeof ScheduleSlugImport
      parentRoute: typeof rootRoute
    }
    '/*': {
      id: '/*'
      path: '/*'
      fullPath: '/*'
      preLoaderRoute: typeof Import
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/manage': {
      id: '/manage'
      path: '/manage'
      fullPath: '/manage'
      preLoaderRoute: typeof ManageImport
      parentRoute: typeof rootRoute
    }
    '/manage/_adminLayout': {
      id: '/manage/_adminLayout'
      path: '/manage'
      fullPath: '/manage'
      preLoaderRoute: typeof ManageAdminLayoutImport
      parentRoute: typeof ManageRoute
    }
    '/manage/_adminLayout/schedule': {
      id: '/manage/_adminLayout/schedule'
      path: '/schedule'
      fullPath: '/manage/schedule'
      preLoaderRoute: typeof ManageAdminLayoutScheduleImport
      parentRoute: typeof ManageAdminLayoutImport
    }
    '/manage/_adminLayout/subjects': {
      id: '/manage/_adminLayout/subjects'
      path: '/subjects'
      fullPath: '/manage/subjects'
      preLoaderRoute: typeof ManageAdminLayoutSubjectsImport
      parentRoute: typeof ManageAdminLayoutImport
    }
    '/manage/_adminLayout/teachers': {
      id: '/manage/_adminLayout/teachers'
      path: '/teachers'
      fullPath: '/manage/teachers'
      preLoaderRoute: typeof ManageAdminLayoutTeachersImport
      parentRoute: typeof ManageAdminLayoutImport
    }
    '/manage/_adminLayout/': {
      id: '/manage/_adminLayout/'
      path: '/'
      fullPath: '/manage/'
      preLoaderRoute: typeof ManageAdminLayoutIndexImport
      parentRoute: typeof ManageAdminLayoutImport
    }
  }
}

// Create and export the route tree

interface ManageAdminLayoutRouteChildren {
  ManageAdminLayoutScheduleRoute: typeof ManageAdminLayoutScheduleRoute
  ManageAdminLayoutSubjectsRoute: typeof ManageAdminLayoutSubjectsRoute
  ManageAdminLayoutTeachersRoute: typeof ManageAdminLayoutTeachersRoute
  ManageAdminLayoutIndexRoute: typeof ManageAdminLayoutIndexRoute
}

const ManageAdminLayoutRouteChildren: ManageAdminLayoutRouteChildren = {
  ManageAdminLayoutScheduleRoute: ManageAdminLayoutScheduleRoute,
  ManageAdminLayoutSubjectsRoute: ManageAdminLayoutSubjectsRoute,
  ManageAdminLayoutTeachersRoute: ManageAdminLayoutTeachersRoute,
  ManageAdminLayoutIndexRoute: ManageAdminLayoutIndexRoute,
}

const ManageAdminLayoutRouteWithChildren =
  ManageAdminLayoutRoute._addFileChildren(ManageAdminLayoutRouteChildren)

interface ManageRouteChildren {
  ManageAdminLayoutRoute: typeof ManageAdminLayoutRouteWithChildren
}

const ManageRouteChildren: ManageRouteChildren = {
  ManageAdminLayoutRoute: ManageAdminLayoutRouteWithChildren,
}

const ManageRouteWithChildren =
  ManageRoute._addFileChildren(ManageRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$scheduleSlug': typeof ScheduleSlugRoute
  '/*': typeof Route
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/manage': typeof ManageAdminLayoutRouteWithChildren
  '/manage/schedule': typeof ManageAdminLayoutScheduleRoute
  '/manage/subjects': typeof ManageAdminLayoutSubjectsRoute
  '/manage/teachers': typeof ManageAdminLayoutTeachersRoute
  '/manage/': typeof ManageAdminLayoutIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$scheduleSlug': typeof ScheduleSlugRoute
  '/*': typeof Route
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/manage': typeof ManageAdminLayoutIndexRoute
  '/manage/schedule': typeof ManageAdminLayoutScheduleRoute
  '/manage/subjects': typeof ManageAdminLayoutSubjectsRoute
  '/manage/teachers': typeof ManageAdminLayoutTeachersRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$scheduleSlug': typeof ScheduleSlugRoute
  '/*': typeof Route
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/manage': typeof ManageRouteWithChildren
  '/manage/_adminLayout': typeof ManageAdminLayoutRouteWithChildren
  '/manage/_adminLayout/schedule': typeof ManageAdminLayoutScheduleRoute
  '/manage/_adminLayout/subjects': typeof ManageAdminLayoutSubjectsRoute
  '/manage/_adminLayout/teachers': typeof ManageAdminLayoutTeachersRoute
  '/manage/_adminLayout/': typeof ManageAdminLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$scheduleSlug'
    | '/*'
    | '/login'
    | '/register'
    | '/manage'
    | '/manage/schedule'
    | '/manage/subjects'
    | '/manage/teachers'
    | '/manage/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$scheduleSlug'
    | '/*'
    | '/login'
    | '/register'
    | '/manage'
    | '/manage/schedule'
    | '/manage/subjects'
    | '/manage/teachers'
  id:
    | '__root__'
    | '/'
    | '/$scheduleSlug'
    | '/*'
    | '/login'
    | '/register'
    | '/manage'
    | '/manage/_adminLayout'
    | '/manage/_adminLayout/schedule'
    | '/manage/_adminLayout/subjects'
    | '/manage/_adminLayout/teachers'
    | '/manage/_adminLayout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ScheduleSlugRoute: typeof ScheduleSlugRoute
  Route: typeof Route
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  ManageRoute: typeof ManageRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ScheduleSlugRoute: ScheduleSlugRoute,
  Route: Route,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  ManageRoute: ManageRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$scheduleSlug",
        "/*",
        "/login",
        "/register",
        "/manage"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$scheduleSlug": {
      "filePath": "$scheduleSlug.tsx"
    },
    "/*": {
      "filePath": "*.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/manage": {
      "filePath": "manage",
      "children": [
        "/manage/_adminLayout"
      ]
    },
    "/manage/_adminLayout": {
      "filePath": "manage/_adminLayout.tsx",
      "parent": "/manage",
      "children": [
        "/manage/_adminLayout/schedule",
        "/manage/_adminLayout/subjects",
        "/manage/_adminLayout/teachers",
        "/manage/_adminLayout/"
      ]
    },
    "/manage/_adminLayout/schedule": {
      "filePath": "manage/_adminLayout/schedule.tsx",
      "parent": "/manage/_adminLayout"
    },
    "/manage/_adminLayout/subjects": {
      "filePath": "manage/_adminLayout/subjects.tsx",
      "parent": "/manage/_adminLayout"
    },
    "/manage/_adminLayout/teachers": {
      "filePath": "manage/_adminLayout/teachers.tsx",
      "parent": "/manage/_adminLayout"
    },
    "/manage/_adminLayout/": {
      "filePath": "manage/_adminLayout/index.tsx",
      "parent": "/manage/_adminLayout"
    }
  }
}
ROUTE_MANIFEST_END */
