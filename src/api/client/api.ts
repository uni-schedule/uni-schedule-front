/* tslint:disable */
/* eslint-disable */
/**
 * Uni Schedule API
 * This is an API for Uni Schedule App.
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface DomainClass
 */
export interface DomainClass {
    /**
     * 
     * @type {DomainClassType}
     * @memberof DomainClass
     */
    'class_type': DomainClassType;
    /**
     * 
     * @type {number}
     * @memberof DomainClass
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof DomainClass
     */
    'schedule_id': number;
    /**
     * 
     * @type {number}
     * @memberof DomainClass
     */
    'subject_id': number;
    /**
     * 
     * @type {number}
     * @memberof DomainClass
     */
    'teacher_id': number;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const DomainClassType = {
    Lecture: 'lecture',
    Practice: 'practice',
    Lab: 'lab',
    Combined: 'combined'
} as const;

export type DomainClassType = typeof DomainClassType[keyof typeof DomainClassType];


/**
 * 
 * @export
 * @interface DomainClassView
 */
export interface DomainClassView {
    /**
     * 
     * @type {DomainClassType}
     * @memberof DomainClassView
     */
    'class_type': DomainClassType;
    /**
     * 
     * @type {number}
     * @memberof DomainClassView
     */
    'id': number;
    /**
     * 
     * @type {DomainSubjectView}
     * @memberof DomainClassView
     */
    'subject': DomainSubjectView;
    /**
     * 
     * @type {DomainTeacherView}
     * @memberof DomainClassView
     */
    'teacher': DomainTeacherView;
}


/**
 * 
 * @export
 * @interface DomainCreateClassDTO
 */
export interface DomainCreateClassDTO {
    /**
     * 
     * @type {DomainClassType}
     * @memberof DomainCreateClassDTO
     */
    'class_type': DomainClassType;
    /**
     * 
     * @type {number}
     * @memberof DomainCreateClassDTO
     */
    'schedule_id': number;
    /**
     * 
     * @type {number}
     * @memberof DomainCreateClassDTO
     */
    'subject_id': number;
    /**
     * 
     * @type {number}
     * @memberof DomainCreateClassDTO
     */
    'teacher_id': number;
}


/**
 * 
 * @export
 * @interface DomainCreateSubjectDTO
 */
export interface DomainCreateSubjectDTO {
    /**
     * 
     * @type {string}
     * @memberof DomainCreateSubjectDTO
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof DomainCreateSubjectDTO
     */
    'schedule_id': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const DomainDay = {
    Monday: 'monday',
    Tuesday: 'tuesday',
    Wednesday: 'wednesday',
    Thursday: 'thursday',
    Friday: 'friday',
    Saturday: 'saturday'
} as const;

export type DomainDay = typeof DomainDay[keyof typeof DomainDay];


/**
 * 
 * @export
 * @interface DomainPagination
 */
export interface DomainPagination {
    /**
     * 
     * @type {number}
     * @memberof DomainPagination
     */
    'limit': number;
    /**
     * 
     * @type {number}
     * @memberof DomainPagination
     */
    'offest': number;
    /**
     * 
     * @type {number}
     * @memberof DomainPagination
     */
    'pages': number;
    /**
     * 
     * @type {number}
     * @memberof DomainPagination
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface DomainSchedule
 */
export interface DomainSchedule {
    /**
     * 
     * @type {number}
     * @memberof DomainSchedule
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof DomainSchedule
     */
    'slug': string;
    /**
     * 
     * @type {number}
     * @memberof DomainSchedule
     */
    'user_id': number;
}
/**
 * 
 * @export
 * @interface DomainScheduleEntryView
 */
export interface DomainScheduleEntryView {
    /**
     * 
     * @type {number}
     * @memberof DomainScheduleEntryView
     */
    'class_number': number;
    /**
     * 
     * @type {DomainDay}
     * @memberof DomainScheduleEntryView
     */
    'day': DomainDay;
    /**
     * 
     * @type {DomainClassView}
     * @memberof DomainScheduleEntryView
     */
    'even': DomainClassView;
    /**
     * 
     * @type {number}
     * @memberof DomainScheduleEntryView
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof DomainScheduleEntryView
     */
    'is_static': boolean;
    /**
     * 
     * @type {DomainClassView}
     * @memberof DomainScheduleEntryView
     */
    'odd': DomainClassView;
}


/**
 * 
 * @export
 * @interface DomainScheduleView
 */
export interface DomainScheduleView {
    /**
     * 
     * @type {Array<DomainScheduleEntryView>}
     * @memberof DomainScheduleView
     */
    'entries': Array<DomainScheduleEntryView>;
    /**
     * 
     * @type {number}
     * @memberof DomainScheduleView
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof DomainScheduleView
     */
    'slug': string;
    /**
     * 
     * @type {number}
     * @memberof DomainScheduleView
     */
    'user_id': number;
}
/**
 * 
 * @export
 * @interface DomainSubject
 */
export interface DomainSubject {
    /**
     * 
     * @type {number}
     * @memberof DomainSubject
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof DomainSubject
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof DomainSubject
     */
    'schedule_id': number;
}
/**
 * 
 * @export
 * @interface DomainSubjectView
 */
export interface DomainSubjectView {
    /**
     * 
     * @type {number}
     * @memberof DomainSubjectView
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof DomainSubjectView
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface DomainTeacher
 */
export interface DomainTeacher {
    /**
     * 
     * @type {string}
     * @memberof DomainTeacher
     */
    'first_name': string;
    /**
     * 
     * @type {number}
     * @memberof DomainTeacher
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof DomainTeacher
     */
    'last_name': string;
    /**
     * 
     * @type {number}
     * @memberof DomainTeacher
     */
    'schedule_id': number;
    /**
     * 
     * @type {string}
     * @memberof DomainTeacher
     */
    'surname': string;
}
/**
 * 
 * @export
 * @interface DomainTeacherCreateDTO
 */
export interface DomainTeacherCreateDTO {
    /**
     * 
     * @type {string}
     * @memberof DomainTeacherCreateDTO
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof DomainTeacherCreateDTO
     */
    'last_name': string;
    /**
     * 
     * @type {number}
     * @memberof DomainTeacherCreateDTO
     */
    'schedule_id': number;
    /**
     * 
     * @type {string}
     * @memberof DomainTeacherCreateDTO
     */
    'surname': string;
}
/**
 * 
 * @export
 * @interface DomainTeacherUpdateDTO
 */
export interface DomainTeacherUpdateDTO {
    /**
     * 
     * @type {string}
     * @memberof DomainTeacherUpdateDTO
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof DomainTeacherUpdateDTO
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof DomainTeacherUpdateDTO
     */
    'surname': string;
}
/**
 * 
 * @export
 * @interface DomainTeacherView
 */
export interface DomainTeacherView {
    /**
     * 
     * @type {string}
     * @memberof DomainTeacherView
     */
    'first_name': string;
    /**
     * 
     * @type {number}
     * @memberof DomainTeacherView
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof DomainTeacherView
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof DomainTeacherView
     */
    'surname': string;
}
/**
 * 
 * @export
 * @interface DomainUpdateClassDTO
 */
export interface DomainUpdateClassDTO {
    /**
     * 
     * @type {DomainClassType}
     * @memberof DomainUpdateClassDTO
     */
    'class_type': DomainClassType;
    /**
     * 
     * @type {number}
     * @memberof DomainUpdateClassDTO
     */
    'subject_id': number;
    /**
     * 
     * @type {number}
     * @memberof DomainUpdateClassDTO
     */
    'teacher_id': number;
}


/**
 * 
 * @export
 * @interface DomainUpdateSubjectDTO
 */
export interface DomainUpdateSubjectDTO {
    /**
     * 
     * @type {string}
     * @memberof DomainUpdateSubjectDTO
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface HandlerAuthResponse
 */
export interface HandlerAuthResponse {
    /**
     * 
     * @type {string}
     * @memberof HandlerAuthResponse
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof HandlerAuthResponse
     */
    'refresh_token': string;
}
/**
 * 
 * @export
 * @interface HandlerCreateScheduleRequest
 */
export interface HandlerCreateScheduleRequest {
    /**
     * 
     * @type {string}
     * @memberof HandlerCreateScheduleRequest
     */
    'slug': string;
}
/**
 * 
 * @export
 * @interface HandlerErrorResponse
 */
export interface HandlerErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof HandlerErrorResponse
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface HandlerGetMySchedulesResponse
 */
export interface HandlerGetMySchedulesResponse {
    /**
     * 
     * @type {Array<DomainSchedule>}
     * @memberof HandlerGetMySchedulesResponse
     */
    'data': Array<DomainSchedule>;
    /**
     * 
     * @type {DomainPagination}
     * @memberof HandlerGetMySchedulesResponse
     */
    'pagination': DomainPagination;
}
/**
 * 
 * @export
 * @interface HandlerGetScheduleClassesResponse
 */
export interface HandlerGetScheduleClassesResponse {
    /**
     * 
     * @type {Array<DomainClassView>}
     * @memberof HandlerGetScheduleClassesResponse
     */
    'data': Array<DomainClassView>;
    /**
     * 
     * @type {DomainPagination}
     * @memberof HandlerGetScheduleClassesResponse
     */
    'pagination': DomainPagination;
}
/**
 * 
 * @export
 * @interface HandlerGetSubjectsResponse
 */
export interface HandlerGetSubjectsResponse {
    /**
     * 
     * @type {Array<DomainSubject>}
     * @memberof HandlerGetSubjectsResponse
     */
    'data': Array<DomainSubject>;
    /**
     * 
     * @type {DomainPagination}
     * @memberof HandlerGetSubjectsResponse
     */
    'pagination': DomainPagination;
}
/**
 * 
 * @export
 * @interface HandlerGetTeahersResponse
 */
export interface HandlerGetTeahersResponse {
    /**
     * 
     * @type {Array<DomainTeacher>}
     * @memberof HandlerGetTeahersResponse
     */
    'data': Array<DomainTeacher>;
    /**
     * 
     * @type {DomainPagination}
     * @memberof HandlerGetTeahersResponse
     */
    'pagination': DomainPagination;
}
/**
 * 
 * @export
 * @interface HandlerIDResponse
 */
export interface HandlerIDResponse {
    /**
     * 
     * @type {number}
     * @memberof HandlerIDResponse
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface HandlerLoginRequest
 */
export interface HandlerLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof HandlerLoginRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof HandlerLoginRequest
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface HandlerRefreshRequest
 */
export interface HandlerRefreshRequest {
    /**
     * 
     * @type {string}
     * @memberof HandlerRefreshRequest
     */
    'refresh_token': string;
}
/**
 * 
 * @export
 * @interface HandlerRegisterRequest
 */
export interface HandlerRegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof HandlerRegisterRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof HandlerRegisterRequest
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface HandlerUpdateScheduleRequest
 */
export interface HandlerUpdateScheduleRequest {
    /**
     * 
     * @type {string}
     * @memberof HandlerUpdateScheduleRequest
     */
    'slug': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get access and refresh token pair by username and password
         * @summary Login
         * @param {HandlerLoginRequest} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin: async (data: HandlerLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('authLogin', 'data', data)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a new access and refresh token pair using the refresh token
         * @summary Refresh Tokens
         * @param {HandlerRefreshRequest} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefresh: async (data: HandlerRefreshRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('authRefresh', 'data', data)
            const localVarPath = `/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an account and get access and refresh token pair
         * @summary Register
         * @param {HandlerRegisterRequest} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegister: async (data: HandlerRegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('authRegister', 'data', data)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Get access and refresh token pair by username and password
         * @summary Login
         * @param {HandlerLoginRequest} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogin(data: HandlerLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogin(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate a new access and refresh token pair using the refresh token
         * @summary Refresh Tokens
         * @param {HandlerRefreshRequest} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefresh(data: HandlerRefreshRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRefresh(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authRefresh']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create an account and get access and refresh token pair
         * @summary Register
         * @param {HandlerRegisterRequest} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegister(data: HandlerRegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerAuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRegister(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authRegister']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Get access and refresh token pair by username and password
         * @summary Login
         * @param {HandlerLoginRequest} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin(data: HandlerLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<HandlerAuthResponse> {
            return localVarFp.authLogin(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a new access and refresh token pair using the refresh token
         * @summary Refresh Tokens
         * @param {HandlerRefreshRequest} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefresh(data: HandlerRefreshRequest, options?: RawAxiosRequestConfig): AxiosPromise<HandlerAuthResponse> {
            return localVarFp.authRefresh(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an account and get access and refresh token pair
         * @summary Register
         * @param {HandlerRegisterRequest} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegister(data: HandlerRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<HandlerAuthResponse> {
            return localVarFp.authRegister(data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
    /**
     * Get access and refresh token pair by username and password
     * @summary Login
     * @param {HandlerLoginRequest} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authLogin(data: HandlerLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<HandlerAuthResponse>;

    /**
     * Generate a new access and refresh token pair using the refresh token
     * @summary Refresh Tokens
     * @param {HandlerRefreshRequest} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authRefresh(data: HandlerRefreshRequest, options?: RawAxiosRequestConfig): AxiosPromise<HandlerAuthResponse>;

    /**
     * Create an account and get access and refresh token pair
     * @summary Register
     * @param {HandlerRegisterRequest} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authRegister(data: HandlerRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<HandlerAuthResponse>;

}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
    /**
     * Get access and refresh token pair by username and password
     * @summary Login
     * @param {HandlerLoginRequest} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLogin(data: HandlerLoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLogin(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a new access and refresh token pair using the refresh token
     * @summary Refresh Tokens
     * @param {HandlerRefreshRequest} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRefresh(data: HandlerRefreshRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRefresh(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an account and get access and refresh token pair
     * @summary Register
     * @param {HandlerRegisterRequest} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRegister(data: HandlerRegisterRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRegister(data, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ClassApi - axios parameter creator
 * @export
 */
export const ClassApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create Class
         * @summary Create Class
         * @param {DomainCreateClassDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classesCreate: async (data: DomainCreateClassDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('classesCreate', 'data', data)
            const localVarPath = `/classes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Class
         * @summary Delete Class
         * @param {number} id Class ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classesDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('classesDelete', 'id', id)
            const localVarPath = `/classes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Class  By ID
         * @summary Get Class By ID
         * @param {number} id Class ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classesGetById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('classesGetById', 'id', id)
            const localVarPath = `/classes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Schedule\'s Classes
         * @summary Get Schedule\'s Classes
         * @param {number} scheduleId Schedule ID
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classesGetSchedule: async (scheduleId: number, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('classesGetSchedule', 'scheduleId', scheduleId)
            const localVarPath = `/schedules/{schedule_id}/classes`
                .replace(`{${"schedule_id"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Class
         * @summary Update Class
         * @param {number} id Class ID
         * @param {DomainUpdateClassDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classesUpdate: async (id: number, data: DomainUpdateClassDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('classesUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('classesUpdate', 'data', data)
            const localVarPath = `/classes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClassApi - functional programming interface
 * @export
 */
export const ClassApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClassApiAxiosParamCreator(configuration)
    return {
        /**
         * Create Class
         * @summary Create Class
         * @param {DomainCreateClassDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classesCreate(data: DomainCreateClassDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerIDResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.classesCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassApi.classesCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete Class
         * @summary Delete Class
         * @param {number} id Class ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classesDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerIDResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.classesDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassApi.classesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Class  By ID
         * @summary Get Class By ID
         * @param {number} id Class ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classesGetById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainClass>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.classesGetById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassApi.classesGetById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Schedule\'s Classes
         * @summary Get Schedule\'s Classes
         * @param {number} scheduleId Schedule ID
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classesGetSchedule(scheduleId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerGetScheduleClassesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.classesGetSchedule(scheduleId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassApi.classesGetSchedule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Class
         * @summary Update Class
         * @param {number} id Class ID
         * @param {DomainUpdateClassDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async classesUpdate(id: number, data: DomainUpdateClassDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerIDResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.classesUpdate(id, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassApi.classesUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClassApi - factory interface
 * @export
 */
export const ClassApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClassApiFp(configuration)
    return {
        /**
         * Create Class
         * @summary Create Class
         * @param {DomainCreateClassDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classesCreate(data: DomainCreateClassDTO, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse> {
            return localVarFp.classesCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Class
         * @summary Delete Class
         * @param {number} id Class ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classesDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse> {
            return localVarFp.classesDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Class  By ID
         * @summary Get Class By ID
         * @param {number} id Class ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classesGetById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<DomainClass> {
            return localVarFp.classesGetById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Schedule\'s Classes
         * @summary Get Schedule\'s Classes
         * @param {number} scheduleId Schedule ID
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classesGetSchedule(scheduleId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<HandlerGetScheduleClassesResponse> {
            return localVarFp.classesGetSchedule(scheduleId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Class
         * @summary Update Class
         * @param {number} id Class ID
         * @param {DomainUpdateClassDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classesUpdate(id: number, data: DomainUpdateClassDTO, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse> {
            return localVarFp.classesUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClassApi - interface
 * @export
 * @interface ClassApi
 */
export interface ClassApiInterface {
    /**
     * Create Class
     * @summary Create Class
     * @param {DomainCreateClassDTO} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApiInterface
     */
    classesCreate(data: DomainCreateClassDTO, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse>;

    /**
     * Delete Class
     * @summary Delete Class
     * @param {number} id Class ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApiInterface
     */
    classesDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse>;

    /**
     * Get Class  By ID
     * @summary Get Class By ID
     * @param {number} id Class ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApiInterface
     */
    classesGetById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<DomainClass>;

    /**
     * Get Schedule\'s Classes
     * @summary Get Schedule\'s Classes
     * @param {number} scheduleId Schedule ID
     * @param {number} [limit] Limit
     * @param {number} [offset] Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApiInterface
     */
    classesGetSchedule(scheduleId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<HandlerGetScheduleClassesResponse>;

    /**
     * Update Class
     * @summary Update Class
     * @param {number} id Class ID
     * @param {DomainUpdateClassDTO} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApiInterface
     */
    classesUpdate(id: number, data: DomainUpdateClassDTO, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse>;

}

/**
 * ClassApi - object-oriented interface
 * @export
 * @class ClassApi
 * @extends {BaseAPI}
 */
export class ClassApi extends BaseAPI implements ClassApiInterface {
    /**
     * Create Class
     * @summary Create Class
     * @param {DomainCreateClassDTO} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApi
     */
    public classesCreate(data: DomainCreateClassDTO, options?: RawAxiosRequestConfig) {
        return ClassApiFp(this.configuration).classesCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Class
     * @summary Delete Class
     * @param {number} id Class ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApi
     */
    public classesDelete(id: number, options?: RawAxiosRequestConfig) {
        return ClassApiFp(this.configuration).classesDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Class  By ID
     * @summary Get Class By ID
     * @param {number} id Class ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApi
     */
    public classesGetById(id: number, options?: RawAxiosRequestConfig) {
        return ClassApiFp(this.configuration).classesGetById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Schedule\'s Classes
     * @summary Get Schedule\'s Classes
     * @param {number} scheduleId Schedule ID
     * @param {number} [limit] Limit
     * @param {number} [offset] Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApi
     */
    public classesGetSchedule(scheduleId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return ClassApiFp(this.configuration).classesGetSchedule(scheduleId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Class
     * @summary Update Class
     * @param {number} id Class ID
     * @param {DomainUpdateClassDTO} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassApi
     */
    public classesUpdate(id: number, data: DomainUpdateClassDTO, options?: RawAxiosRequestConfig) {
        return ClassApiFp(this.configuration).classesUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ScheduleApi - axios parameter creator
 * @export
 */
export const ScheduleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new schedule
         * @summary Create Schedule
         * @param {HandlerCreateScheduleRequest} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleCreate: async (data: HandlerCreateScheduleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('scheduleCreate', 'data', data)
            const localVarPath = `/schedules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete schedule
         * @summary Delete Schedule
         * @param {number} id Schedule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('scheduleDelete', 'id', id)
            const localVarPath = `/schedules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Current User Schedules
         * @summary Get Current User Schedules
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleGetMy: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schedules/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get schedule using slug
         * @summary Get Schedule By Slug
         * @param {string} slug Schedule Slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleGetSlug: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('scheduleGetSlug', 'slug', slug)
            const localVarPath = `/schedules/slug/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update schedule
         * @summary Update Schedule
         * @param {number} id Schedule ID
         * @param {HandlerUpdateScheduleRequest} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleUpdate: async (id: number, data: HandlerUpdateScheduleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('scheduleUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('scheduleUpdate', 'data', data)
            const localVarPath = `/schedules/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleApi - functional programming interface
 * @export
 */
export const ScheduleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new schedule
         * @summary Create Schedule
         * @param {HandlerCreateScheduleRequest} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleCreate(data: HandlerCreateScheduleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerIDResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleApi.scheduleCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete schedule
         * @summary Delete Schedule
         * @param {number} id Schedule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerIDResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleApi.scheduleDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Current User Schedules
         * @summary Get Current User Schedules
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleGetMy(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerGetMySchedulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleGetMy(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleApi.scheduleGetMy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get schedule using slug
         * @summary Get Schedule By Slug
         * @param {string} slug Schedule Slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleGetSlug(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainScheduleView>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleGetSlug(slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleApi.scheduleGetSlug']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update schedule
         * @summary Update Schedule
         * @param {number} id Schedule ID
         * @param {HandlerUpdateScheduleRequest} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleUpdate(id: number, data: HandlerUpdateScheduleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerIDResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleUpdate(id, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScheduleApi.scheduleUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ScheduleApi - factory interface
 * @export
 */
export const ScheduleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleApiFp(configuration)
    return {
        /**
         * Create a new schedule
         * @summary Create Schedule
         * @param {HandlerCreateScheduleRequest} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleCreate(data: HandlerCreateScheduleRequest, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse> {
            return localVarFp.scheduleCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete schedule
         * @summary Delete Schedule
         * @param {number} id Schedule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse> {
            return localVarFp.scheduleDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Current User Schedules
         * @summary Get Current User Schedules
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleGetMy(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<HandlerGetMySchedulesResponse> {
            return localVarFp.scheduleGetMy(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get schedule using slug
         * @summary Get Schedule By Slug
         * @param {string} slug Schedule Slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleGetSlug(slug: string, options?: RawAxiosRequestConfig): AxiosPromise<DomainScheduleView> {
            return localVarFp.scheduleGetSlug(slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Update schedule
         * @summary Update Schedule
         * @param {number} id Schedule ID
         * @param {HandlerUpdateScheduleRequest} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleUpdate(id: number, data: HandlerUpdateScheduleRequest, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse> {
            return localVarFp.scheduleUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScheduleApi - interface
 * @export
 * @interface ScheduleApi
 */
export interface ScheduleApiInterface {
    /**
     * Create a new schedule
     * @summary Create Schedule
     * @param {HandlerCreateScheduleRequest} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiInterface
     */
    scheduleCreate(data: HandlerCreateScheduleRequest, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse>;

    /**
     * Delete schedule
     * @summary Delete Schedule
     * @param {number} id Schedule ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiInterface
     */
    scheduleDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse>;

    /**
     * Get Current User Schedules
     * @summary Get Current User Schedules
     * @param {number} [limit] Limit
     * @param {number} [offset] Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiInterface
     */
    scheduleGetMy(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<HandlerGetMySchedulesResponse>;

    /**
     * Get schedule using slug
     * @summary Get Schedule By Slug
     * @param {string} slug Schedule Slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiInterface
     */
    scheduleGetSlug(slug: string, options?: RawAxiosRequestConfig): AxiosPromise<DomainScheduleView>;

    /**
     * Update schedule
     * @summary Update Schedule
     * @param {number} id Schedule ID
     * @param {HandlerUpdateScheduleRequest} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApiInterface
     */
    scheduleUpdate(id: number, data: HandlerUpdateScheduleRequest, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse>;

}

/**
 * ScheduleApi - object-oriented interface
 * @export
 * @class ScheduleApi
 * @extends {BaseAPI}
 */
export class ScheduleApi extends BaseAPI implements ScheduleApiInterface {
    /**
     * Create a new schedule
     * @summary Create Schedule
     * @param {HandlerCreateScheduleRequest} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public scheduleCreate(data: HandlerCreateScheduleRequest, options?: RawAxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).scheduleCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete schedule
     * @summary Delete Schedule
     * @param {number} id Schedule ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public scheduleDelete(id: number, options?: RawAxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).scheduleDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Current User Schedules
     * @summary Get Current User Schedules
     * @param {number} [limit] Limit
     * @param {number} [offset] Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public scheduleGetMy(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).scheduleGetMy(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get schedule using slug
     * @summary Get Schedule By Slug
     * @param {string} slug Schedule Slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public scheduleGetSlug(slug: string, options?: RawAxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).scheduleGetSlug(slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update schedule
     * @summary Update Schedule
     * @param {number} id Schedule ID
     * @param {HandlerUpdateScheduleRequest} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public scheduleUpdate(id: number, data: HandlerUpdateScheduleRequest, options?: RawAxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).scheduleUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SubjectsApi - axios parameter creator
 * @export
 */
export const SubjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create Subject
         * @summary Create Subject
         * @param {DomainCreateSubjectDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectsCreate: async (data: DomainCreateSubjectDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('subjectsCreate', 'data', data)
            const localVarPath = `/subjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Subject
         * @summary Delete Subject
         * @param {number} id Subject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectsDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subjectsDelete', 'id', id)
            const localVarPath = `/subjects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Schedule\'s Subjects
         * @summary Get Schedule\'s Subjects
         * @param {number} scheduleId Schedule ID
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectsGetAllSchedule: async (scheduleId: number, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('subjectsGetAllSchedule', 'scheduleId', scheduleId)
            const localVarPath = `/schedules/{schedule_id}/subjects`
                .replace(`{${"schedule_id"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Subject by ID
         * @summary Get Subject by ID
         * @param {number} id Subject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectsGetById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subjectsGetById', 'id', id)
            const localVarPath = `/subjects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Subject
         * @summary Update Subject
         * @param {number} id Subject ID
         * @param {DomainUpdateSubjectDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectsUpdate: async (id: number, data: DomainUpdateSubjectDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subjectsUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('subjectsUpdate', 'data', data)
            const localVarPath = `/subjects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubjectsApi - functional programming interface
 * @export
 */
export const SubjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create Subject
         * @summary Create Subject
         * @param {DomainCreateSubjectDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subjectsCreate(data: DomainCreateSubjectDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerIDResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subjectsCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubjectsApi.subjectsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete Subject
         * @summary Delete Subject
         * @param {number} id Subject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subjectsDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerIDResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subjectsDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubjectsApi.subjectsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Schedule\'s Subjects
         * @summary Get Schedule\'s Subjects
         * @param {number} scheduleId Schedule ID
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subjectsGetAllSchedule(scheduleId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerGetSubjectsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subjectsGetAllSchedule(scheduleId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubjectsApi.subjectsGetAllSchedule']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Subject by ID
         * @summary Get Subject by ID
         * @param {number} id Subject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subjectsGetById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainSubject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subjectsGetById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubjectsApi.subjectsGetById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Subject
         * @summary Update Subject
         * @param {number} id Subject ID
         * @param {DomainUpdateSubjectDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subjectsUpdate(id: number, data: DomainUpdateSubjectDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerIDResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subjectsUpdate(id, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SubjectsApi.subjectsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SubjectsApi - factory interface
 * @export
 */
export const SubjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubjectsApiFp(configuration)
    return {
        /**
         * Create Subject
         * @summary Create Subject
         * @param {DomainCreateSubjectDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectsCreate(data: DomainCreateSubjectDTO, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse> {
            return localVarFp.subjectsCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Subject
         * @summary Delete Subject
         * @param {number} id Subject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectsDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse> {
            return localVarFp.subjectsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Schedule\'s Subjects
         * @summary Get Schedule\'s Subjects
         * @param {number} scheduleId Schedule ID
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectsGetAllSchedule(scheduleId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<HandlerGetSubjectsResponse> {
            return localVarFp.subjectsGetAllSchedule(scheduleId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Subject by ID
         * @summary Get Subject by ID
         * @param {number} id Subject ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectsGetById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<DomainSubject> {
            return localVarFp.subjectsGetById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Subject
         * @summary Update Subject
         * @param {number} id Subject ID
         * @param {DomainUpdateSubjectDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subjectsUpdate(id: number, data: DomainUpdateSubjectDTO, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse> {
            return localVarFp.subjectsUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubjectsApi - interface
 * @export
 * @interface SubjectsApi
 */
export interface SubjectsApiInterface {
    /**
     * Create Subject
     * @summary Create Subject
     * @param {DomainCreateSubjectDTO} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectsApiInterface
     */
    subjectsCreate(data: DomainCreateSubjectDTO, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse>;

    /**
     * Delete Subject
     * @summary Delete Subject
     * @param {number} id Subject ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectsApiInterface
     */
    subjectsDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse>;

    /**
     * Get Schedule\'s Subjects
     * @summary Get Schedule\'s Subjects
     * @param {number} scheduleId Schedule ID
     * @param {number} [limit] Limit
     * @param {number} [offset] Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectsApiInterface
     */
    subjectsGetAllSchedule(scheduleId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<HandlerGetSubjectsResponse>;

    /**
     * Get Subject by ID
     * @summary Get Subject by ID
     * @param {number} id Subject ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectsApiInterface
     */
    subjectsGetById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<DomainSubject>;

    /**
     * Update Subject
     * @summary Update Subject
     * @param {number} id Subject ID
     * @param {DomainUpdateSubjectDTO} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectsApiInterface
     */
    subjectsUpdate(id: number, data: DomainUpdateSubjectDTO, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse>;

}

/**
 * SubjectsApi - object-oriented interface
 * @export
 * @class SubjectsApi
 * @extends {BaseAPI}
 */
export class SubjectsApi extends BaseAPI implements SubjectsApiInterface {
    /**
     * Create Subject
     * @summary Create Subject
     * @param {DomainCreateSubjectDTO} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectsApi
     */
    public subjectsCreate(data: DomainCreateSubjectDTO, options?: RawAxiosRequestConfig) {
        return SubjectsApiFp(this.configuration).subjectsCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Subject
     * @summary Delete Subject
     * @param {number} id Subject ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectsApi
     */
    public subjectsDelete(id: number, options?: RawAxiosRequestConfig) {
        return SubjectsApiFp(this.configuration).subjectsDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Schedule\'s Subjects
     * @summary Get Schedule\'s Subjects
     * @param {number} scheduleId Schedule ID
     * @param {number} [limit] Limit
     * @param {number} [offset] Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectsApi
     */
    public subjectsGetAllSchedule(scheduleId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return SubjectsApiFp(this.configuration).subjectsGetAllSchedule(scheduleId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Subject by ID
     * @summary Get Subject by ID
     * @param {number} id Subject ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectsApi
     */
    public subjectsGetById(id: number, options?: RawAxiosRequestConfig) {
        return SubjectsApiFp(this.configuration).subjectsGetById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Subject
     * @summary Update Subject
     * @param {number} id Subject ID
     * @param {DomainUpdateSubjectDTO} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectsApi
     */
    public subjectsUpdate(id: number, data: DomainUpdateSubjectDTO, options?: RawAxiosRequestConfig) {
        return SubjectsApiFp(this.configuration).subjectsUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TeacherApi - axios parameter creator
 * @export
 */
export const TeacherApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new teacher
         * @summary Create Teacher
         * @param {DomainTeacherCreateDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherCreate: async (data: DomainTeacherCreateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'data' is not null or undefined
            assertParamExists('teacherCreate', 'data', data)
            const localVarPath = `/teachers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete teacher
         * @summary Delete Teacher
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('teacherDelete', 'id', id)
            const localVarPath = `/teachers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Schedule\'s Teachers
         * @summary Get Schedule\'s Teachers
         * @param {number} scheduleId Schedule ID
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherGetAll: async (scheduleId: number, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleId' is not null or undefined
            assertParamExists('teacherGetAll', 'scheduleId', scheduleId)
            const localVarPath = `/schedules/{schedule_id}/teachers`
                .replace(`{${"schedule_id"}}`, encodeURIComponent(String(scheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Schedule\'s Teacher
         * @summary Get Schedule\'s Teacher
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherGetId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('teacherGetId', 'id', id)
            const localVarPath = `/teachers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update teacher
         * @summary Update Teacher
         * @param {number} id Teacher ID
         * @param {DomainTeacherUpdateDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherUpdate: async (id: number, data: DomainTeacherUpdateDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('teacherUpdate', 'id', id)
            // verify required parameter 'data' is not null or undefined
            assertParamExists('teacherUpdate', 'data', data)
            const localVarPath = `/teachers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeacherApi - functional programming interface
 * @export
 */
export const TeacherApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeacherApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new teacher
         * @summary Create Teacher
         * @param {DomainTeacherCreateDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherCreate(data: DomainTeacherCreateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerIDResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherCreate(data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeacherApi.teacherCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete teacher
         * @summary Delete Teacher
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerIDResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeacherApi.teacherDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Schedule\'s Teachers
         * @summary Get Schedule\'s Teachers
         * @param {number} scheduleId Schedule ID
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherGetAll(scheduleId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerGetTeahersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherGetAll(scheduleId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeacherApi.teacherGetAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Schedule\'s Teacher
         * @summary Get Schedule\'s Teacher
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherGetId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainTeacher>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherGetId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeacherApi.teacherGetId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update teacher
         * @summary Update Teacher
         * @param {number} id Teacher ID
         * @param {DomainTeacherUpdateDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teacherUpdate(id: number, data: DomainTeacherUpdateDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HandlerIDResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teacherUpdate(id, data, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TeacherApi.teacherUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TeacherApi - factory interface
 * @export
 */
export const TeacherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeacherApiFp(configuration)
    return {
        /**
         * Create a new teacher
         * @summary Create Teacher
         * @param {DomainTeacherCreateDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherCreate(data: DomainTeacherCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse> {
            return localVarFp.teacherCreate(data, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete teacher
         * @summary Delete Teacher
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse> {
            return localVarFp.teacherDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Schedule\'s Teachers
         * @summary Get Schedule\'s Teachers
         * @param {number} scheduleId Schedule ID
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherGetAll(scheduleId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<HandlerGetTeahersResponse> {
            return localVarFp.teacherGetAll(scheduleId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Schedule\'s Teacher
         * @summary Get Schedule\'s Teacher
         * @param {number} id Teacher ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherGetId(id: number, options?: RawAxiosRequestConfig): AxiosPromise<DomainTeacher> {
            return localVarFp.teacherGetId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update teacher
         * @summary Update Teacher
         * @param {number} id Teacher ID
         * @param {DomainTeacherUpdateDTO} data Data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherUpdate(id: number, data: DomainTeacherUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse> {
            return localVarFp.teacherUpdate(id, data, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeacherApi - interface
 * @export
 * @interface TeacherApi
 */
export interface TeacherApiInterface {
    /**
     * Create a new teacher
     * @summary Create Teacher
     * @param {DomainTeacherCreateDTO} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    teacherCreate(data: DomainTeacherCreateDTO, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse>;

    /**
     * Delete teacher
     * @summary Delete Teacher
     * @param {number} id Teacher ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    teacherDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse>;

    /**
     * Get Schedule\'s Teachers
     * @summary Get Schedule\'s Teachers
     * @param {number} scheduleId Schedule ID
     * @param {number} [limit] Limit
     * @param {number} [offset] Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    teacherGetAll(scheduleId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<HandlerGetTeahersResponse>;

    /**
     * Get Schedule\'s Teacher
     * @summary Get Schedule\'s Teacher
     * @param {number} id Teacher ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    teacherGetId(id: number, options?: RawAxiosRequestConfig): AxiosPromise<DomainTeacher>;

    /**
     * Update teacher
     * @summary Update Teacher
     * @param {number} id Teacher ID
     * @param {DomainTeacherUpdateDTO} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    teacherUpdate(id: number, data: DomainTeacherUpdateDTO, options?: RawAxiosRequestConfig): AxiosPromise<HandlerIDResponse>;

}

/**
 * TeacherApi - object-oriented interface
 * @export
 * @class TeacherApi
 * @extends {BaseAPI}
 */
export class TeacherApi extends BaseAPI implements TeacherApiInterface {
    /**
     * Create a new teacher
     * @summary Create Teacher
     * @param {DomainTeacherCreateDTO} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public teacherCreate(data: DomainTeacherCreateDTO, options?: RawAxiosRequestConfig) {
        return TeacherApiFp(this.configuration).teacherCreate(data, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete teacher
     * @summary Delete Teacher
     * @param {number} id Teacher ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public teacherDelete(id: number, options?: RawAxiosRequestConfig) {
        return TeacherApiFp(this.configuration).teacherDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Schedule\'s Teachers
     * @summary Get Schedule\'s Teachers
     * @param {number} scheduleId Schedule ID
     * @param {number} [limit] Limit
     * @param {number} [offset] Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public teacherGetAll(scheduleId: number, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return TeacherApiFp(this.configuration).teacherGetAll(scheduleId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Schedule\'s Teacher
     * @summary Get Schedule\'s Teacher
     * @param {number} id Teacher ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public teacherGetId(id: number, options?: RawAxiosRequestConfig) {
        return TeacherApiFp(this.configuration).teacherGetId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update teacher
     * @summary Update Teacher
     * @param {number} id Teacher ID
     * @param {DomainTeacherUpdateDTO} data Data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public teacherUpdate(id: number, data: DomainTeacherUpdateDTO, options?: RawAxiosRequestConfig) {
        return TeacherApiFp(this.configuration).teacherUpdate(id, data, options).then((request) => request(this.axios, this.basePath));
    }
}



